datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  wordLists   UserWordList[]
  sharedLists SharedWordList[]
  comments    Comment[]
  likes       Like[]
  userWord    UserWord[]
  bookMark    SharedWordListBookmark[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Word {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  english       String
  korean        String
  level         String
  category      String?
  example       String?
  pronunciation String?
  createdAt     DateTime @default(now())
  isOfficial    Boolean  @default(true) // 공식 단어장 여부
}

model UserWordList {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  description String? // 단어장 설명 추가
  isPublic    Boolean  @default(false) // 공유 여부
  tags        String[] // 태그 (예: #TOEIC, #초급, #IT용어 등)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  words          UserWord[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWordList SharedWordList?
}

model UserWord {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  wordListId    String    @db.ObjectId
  userId        String    @db.ObjectId
  english       String
  korean        String
  level         String?
  example       String?
  pronunciation String?
  status        String? // 'known', 'learning', 'difficult' 등
  lastReviewed  DateTime?
  reviewCount   Int       @default(0)
  note          String? // 사용자가 추가하는 개인 노트
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  wordList UserWordList @relation(fields: [wordListId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SharedWordList {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  originalId  String               @unique @db.ObjectId // unique 제약 추가 UserWordList ID
  userId      String               @db.ObjectId
  name        String
  description String?
  tags        String[]
  isActive    Boolean              @default(true) // 공유 상태 활성화/비활성화
  stats       SharedWordListStats?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  user     User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  original UserWordList             @relation(fields: [originalId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  bookMark SharedWordListBookmark[]

  @@index([userId])
}

model SharedWordListStats {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  listId    String         @unique @db.ObjectId
  viewCount Int            @default(0)
  updatedAt DateTime       @updatedAt
  list      SharedWordList @relation(fields: [listId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  listId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordList SharedWordList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([listId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  listId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordList SharedWordList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([userId, listId])
  @@index([userId])
  @@index([listId])
}

model SharedWordListBookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // 즐겨찾기한 사용자
  listId    String   @db.ObjectId // 공유 단어장 ID
  createdAt DateTime @default(now())

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedList SharedWordList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([userId, listId]) // 한 사용자가 같은 공유 단어장을 중복 즐겨찾기할 수 없도록
  @@index([userId])
  @@index([listId])
}
