datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wordLists     UserWordList[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserCustomWord UserCustomWord[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Word {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  english       String
  korean        String
  level         String
  category      String?
  example       String?
  pronunciation String?
  createdAt     DateTime   @default(now())
  isOfficial    Boolean    @default(true) // 공식 단어장 여부
  UserWord      UserWord[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model UserWordList {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  name      String // 단어장 이름 (예: "TOEIC 단어", "자주 틀리는 단어" 등)
  words     UserWord[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCustomWord {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  english       String
  korean        String
  level         String
  example       String?
  pronunciation String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String     @db.ObjectId // 단어를 추가한 사용자
  UserWord      UserWord[]
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserWord {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  wordListId   String    @db.ObjectId
  wordId       String?   @db.ObjectId // 공식 단어 ID
  customWordId String?   @db.ObjectId // 사용자 추가 단어 ID
  status       String? // 'known', 'learning', 'difficult' 등
  lastReviewed DateTime?
  reviewCount  Int       @default(0)
  note         String? // 사용자가 추가하는 개인 노트
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  wordList   UserWordList    @relation(fields: [wordListId], references: [id], onDelete: Cascade)
  word       Word?           @relation(fields: [wordId], references: [id])
  customWord UserCustomWord? @relation(fields: [customWordId], references: [id])

  @@index([wordId])
  @@index([customWordId])
}
