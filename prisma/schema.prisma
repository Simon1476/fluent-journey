datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  wordLists     UserWordList[]
  favorites     Favorite[]
  sharedLists   SharedWordList[]
  comments      Comment[]
  likes         Like[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userWord  UserWord[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Word {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  english       String
  korean        String
  level         String
  category      String?
  example       String?
  pronunciation String?
  createdAt     DateTime @default(now())
  isOfficial    Boolean  @default(true) // 공식 단어장 여부
}

model UserWordList {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @db.ObjectId
  name           String
  description    String? // 단어장 설명 추가
  isPublic       Boolean         @default(false) // 공유 여부
  words          UserWord[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites      Favorite[] // 즐겨찾기 관계 추가
  tags           String[] // 태그 (예: #TOEIC, #초급, #IT용어 등)
  viewCount      Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sharedWordList SharedWordList?
}

model UserWord {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  wordListId    String    @db.ObjectId
  userId        String    @db.ObjectId // 단어를 추가한 사용자
  wordId        String?   @db.ObjectId // 공식 단어 ID (공식 단어일 경우)
  english       String // 커스텀 단어 지원을 위해 직접 저장
  korean        String
  level         String?
  example       String?
  pronunciation String?
  isCustom      Boolean   @default(false) // 사용자가 추가한 단어인지 여부
  status        String? // 'known', 'learning', 'difficult' 등
  lastReviewed  DateTime?
  reviewCount   Int       @default(0)
  note          String? // 사용자가 추가하는 개인 노트
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  wordList UserWordList @relation(fields: [wordListId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([wordId])
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  wordListId String   @db.ObjectId
  createdAt  DateTime @default(now())

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordList UserWordList @relation(fields: [wordListId], references: [id], onDelete: Cascade)

  @@unique([userId, wordListId]) // 한 사용자가 같은 단어장을 중복 즐겨찾기 못하도록
  @@index([userId])
  @@index([wordListId])
}

model SharedWordList {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  originalId  String   @unique @db.ObjectId // unique 제약 추가 UserWordList ID
  userId      String   @db.ObjectId // 공유한 사용자 ID
  name        String
  description String?
  tags        String[]
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  // isActive    Boolean  @default(true) // 공유 상태 활성화/비활성화
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  original UserWordList @relation(fields: [originalId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  listId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordList SharedWordList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([listId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  listId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordList SharedWordList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([userId, listId])
  @@index([userId])
  @@index([listId])
}
